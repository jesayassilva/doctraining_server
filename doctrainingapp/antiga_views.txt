from django.shortcuts import render
from .models import *
import json
from django.http import HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt
import random
from django.shortcuts import redirect
# Create your views here.
#DataFrame
import csv
import pandas as pd
import numpy as np
from django.urls import reverse


#FTP
from ftplib import *

# from StringIO import StringIO
# import cStringIO
#
# output = cStringIO.StringIO()
# try:
#     from StringIO import StringIO
# except ImportError:
#     from io import StringIO

import pandas
import io


# buffer = StringIO.StringIO()

#Variavel com nome de classe ou y de casos clinicos
#se mudar alterar essa variavel
# global df
# df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
# df = pd.read_csv('ftp://jesaias:09011996@files.000webhost.com:21/public_html/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados

classe_casos_clinicos = 'class'
chave_casos_clinicos = 'chave'


voltar_casos_clinicos = '<html><head> <meta charset="utf-8"> </head> <body> <p></p> <a href="/casos_clinicos/">voltar</a> </body> </html>'





def index(request):
    return render(request,'index.html',{})

def api(request):
    return render(request,'api.html',{})

def amostras_doencas(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    # print("Teste")
    # print(df)
    # print(df.loc[0][2])
    amostrasdoencas = zip(df.values,df.index)
    return render(request,'amostras_doencas.html',{'amostrasdoencas':amostrasdoencas, 'colunas':df.columns})


#Editar Doenças e Sintomas
# def editar_amostras_doencas(request,id_doenca):
#     # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
#     df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
#     id_doenca = int(id_doenca)
#     if  request.method == "POST":
#         try:
#             amostra_editada = []
#             for item in df.columns:
#                 if item == chave_casos_clinicos:
#                     amostra_editada.append(id_doenca)
#                 #Se for o nome da coluna
#                 elif item != classe_casos_clinicos:
#                     valor_sintoma = request.POST.get(item)
#                     #Se tiver aquele sintoma
#                     if valor_sintoma == 'on':
#                         amostra_editada.append(1)
#                     else:
#                         amostra_editada.append(0)
#                 #se for o nome da doença
#                 else:
#                     novo_nome_doenca = request.POST.get('doenca')
#                     amostra_editada.append(novo_nome_doenca.upper())#adicionar o nome da doença a lista e em maiusculo
#
#             df.loc[df[chave_casos_clinicos] == id_doenca] = amostra_editada
#
#             # df.loc[id_doenca] = amostra_editada
#             # df.to_csv('infecto_parasitarias_completo01.csv',index=False) #Salvando dataframe em csv e colocar indece
#
#             # arquivo = df.to_csv(path_or_buf = None, index=False) #Salvando dataframe em csv e usando
#             #FTP
#             ftp = FTP()
#             ftp.connect('files.000webhost.com', 21)
#             ftp.login('jesaias','09011996')
#             ftp.cwd ('/public_html/doctraining/')
#             buffer = io.StringIO()
#             df.to_csv(buffer,index=False)
#             text = buffer.getvalue()
#             bio = io.BytesIO(str.encode(text))
#             ftp.storbinary('STOR infecto_parasitarias_completo01.csv', bio)
#             ftp.close()
#             #FTP
#             # File.save('infecto_parasitarias_completo01.csv', arquivo, save=True, storage=SERVIDOR_FTP_WEB)
#
#             # print(df)
#             #retorna None ou on
#             #df.loc[1] = [1.0,7,'abc',0]
#             return redirect('/casos_clinicos/')
#         except Exception as e:
#             return HttpResponse('Erro: '+ str(e) +'\n '+voltar_casos_clinicos)
#     else:
#         try:
#             # df = df.sort_index (axis = 1)#ordenar
#             doencas = pd.DataFrame()
#             doencas['doenca'] = df[classe_casos_clinicos].unique()
#             dados_doenca = df.loc[df[chave_casos_clinicos] == id_doenca]
#             nome_doenca = df.loc[dados_doenca.index[0], classe_casos_clinicos]
#             dados_doenca = df.loc[dados_doenca.index[0]]
#             # dados_doenca = df.loc[id_doenca]
#             # nome_doenca = df.loc[id_doenca, classe_casos_clinicos]
#             amostra_doenca =  zip(dados_doenca,df.columns)
#             return render(request,'editar_amostras_doencas.html',{'amostra_doenca':amostra_doenca,'nome_doenca':nome_doenca,'doencas':doencas,'classe_casos_clinicos':classe_casos_clinicos,'chave_casos_clinicos':chave_casos_clinicos})
#         except Exception as e:
#             return HttpResponse('Erro: '+ str(e) +' '+voltar_casos_clinicos)
def editar_amostras_doencas(request,id_doenca):
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    id_doenca = int(id_doenca)
    if  request.method == "POST":
        try:
            amostra_editada = []
            for item in df.columns:
                if item == chave_casos_clinicos:
                    amostra_editada.append(id_doenca)
                #Se for o nome da coluna
                elif item != classe_casos_clinicos:
                    valor_sintoma = request.POST.get(item)
                    #Se tiver aquele sintoma
                    if valor_sintoma == 'on':
                        amostra_editada.append(1)
                    else:
                        amostra_editada.append(0)
                #se for o nome da doença
                else:
                    novo_nome_doenca = request.POST.get('doenca')
                    amostra_editada.append(novo_nome_doenca.upper())#adicionar o nome da doença a lista e em maiusculo

            df_editar = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/editar_casosclinicos.csv') #lendo os dados
            df2 = pd.DataFrame([amostra_editada], columns=df.columns)
            df_editar = df_editar.append(df2,ignore_index=True)
            # df.loc[df[chave_casos_clinicos] == id_doenca] = amostra_editada

            # df.loc[id_doenca] = amostra_editada
            # df.to_csv('infecto_parasitarias_completo01.csv',index=False) #Salvando dataframe em csv e colocar indece

            # arquivo = df.to_csv(path_or_buf = None, index=False) #Salvando dataframe em csv e usando
            #FTP
            ftp = FTP()
            ftp.connect('files.000webhost.com', 21)
            ftp.login('jesaias','09011996')
            ftp.cwd ('/public_html/doctraining/')
            buffer = io.StringIO()
            df_editar.to_csv(buffer,index=False)
            text = buffer.getvalue()
            bio = io.BytesIO(str.encode(text))
            ftp.storbinary('STOR editar_casosclinicos.csv', bio)
            ftp.close()
            #FTP
            # File.save('infecto_parasitarias_completo01.csv', arquivo, save=True, storage=SERVIDOR_FTP_WEB)

            # print(df)
            #retorna None ou on
            #df.loc[1] = [1.0,7,'abc',0]
            return redirect('/casos_clinicos/')
        except Exception as e:
            return HttpResponse('Erro: '+ str(e) +'\n '+voltar_casos_clinicos)
    else:
        try:
            # df = df.sort_index (axis = 1)#ordenar
            doencas = pd.DataFrame()
            doencas['doenca'] = df[classe_casos_clinicos].unique()
            dados_doenca = df.loc[df[chave_casos_clinicos] == id_doenca]
            nome_doenca = df.loc[dados_doenca.index[0], classe_casos_clinicos]
            dados_doenca = df.loc[dados_doenca.index[0]]
            # dados_doenca = df.loc[id_doenca]
            # nome_doenca = df.loc[id_doenca, classe_casos_clinicos]
            amostra_doenca =  zip(dados_doenca,df.columns)
            return render(request,'editar_amostras_doencas.html',{'amostra_doenca':amostra_doenca,'nome_doenca':nome_doenca,'doencas':doencas,'classe_casos_clinicos':classe_casos_clinicos,'chave_casos_clinicos':chave_casos_clinicos})
        except Exception as e:
            return HttpResponse('Erro: '+ str(e) +' '+voltar_casos_clinicos)




#Mostrar Doenças e Sintomas
def doencas_e_sintomas(request):
    try:
        df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
        # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
        df.sort_index (axis = 1, inplace=True)#ordenar as colunas em ordem
        df.sort_values([classe_casos_clinicos], inplace = True)#ordenar as linhas por nome de doenca
        # df.to_csv('infecto_parasitarias_completo01.csv',index=False) #Salvando dataframe em csv e colocar indece

        #FTP
        ftp = FTP()
        ftp.connect('files.000webhost.com', 21)
        ftp.login('jesaias','09011996')
        ftp.cwd ('/public_html/doctraining/')
        buffer = io.StringIO()
        df.to_csv(buffer,index=False)
        text = buffer.getvalue()
        bio = io.BytesIO(str.encode(text))
        ftp.storbinary('STOR infecto_parasitarias_completo01.csv', bio)
        ftp.close()
        #FTP

        lista_doencas_e_sintomas = []#Lista com as doenças e os sintomas
        for linha in df.values:#todas as Linhas

            #dados = json_doenca_sintomasCasosClinicos(linha,df.columns) #Json de uma amostra de doença
            #json_doenca_sintomasCasosClinicos(linha,colunas):
            lista_sintomas = ''#Lista com sintomas de uma doença
            nome_doenca = ''#doença
            chave_doenca = ''#chave da doenca
            linhas_e_colunas = zip(linha,df.columns) #Zipar as duas variaveis em uma só
            for valor,coluna in linhas_e_colunas:#
                if coluna != chave_casos_clinicos:
                    if valor == 1:#Se tiver o sintoma
                        lista_sintomas =  coluna.replace("_", " ") + ', ' + lista_sintomas #Adicionar Sintoma a lista de sintomas
                    elif valor != 0:#se for o nome da doença não é nem 1 nem 0
                        nome_doenca = valor
                        # lista_sintomas[0] = ''
                else:
                    chave_doenca = valor

            dados = {
            'chave': chave_doenca,
            'sintomas': lista_sintomas,
            'doenca': nome_doenca
            }
            lista_doencas_e_sintomas.append(dados)
        # amostrasdoencas = zip(lista_doencas_e_sintomas,df.index)
        return render(request,'doencas_e_sintomas.html',{'lista_doencas_e_sintomas':lista_doencas_e_sintomas})
    except Exception as e:
         return HttpResponse('Erro: '+ str(e) +' '+voltar_casos_clinicos)


#Novo caso clinico
def nova_amostra_doenca(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    try:
        if  request.method == "POST":
            amostra_nova = []
            for item in df.columns:
                #se a coluna for a chave
                if item == chave_casos_clinicos:
                    amostra_nova.append(max(df[chave_casos_clinicos])+1)
                #Se for o nome da coluna
                elif item != classe_casos_clinicos:
                    valor_sintoma = request.POST.get(item)
                    #Se tiver aquele sintoma
                    if valor_sintoma == 'on':
                        amostra_nova.append(1)
                    else:
                        amostra_nova.append(0)
                #se for o nome da doença
                else:
                    nome_doenca = request.POST.get('doenca')
                    amostra_nova.append(nome_doenca.upper())#adicionar o nome da doença a lista e em maiusculo
            # return HttpResponse(df.columns)
            # df.loc[max(df.index)+1] = amostra_nova
            df2 = pd.DataFrame([amostra_nova], columns=df.columns)
            df = df.append(df2,ignore_index=True)
            #FTP
            ftp = FTP()
            ftp.connect('files.000webhost.com', 21)
            ftp.login('jesaias','09011996')
            ftp.cwd ('/public_html/doctraining/')
            buffer = io.StringIO()
            df.to_csv(buffer,index=False)
            text = buffer.getvalue()
            bio = io.BytesIO(str.encode(text))
            ftp.storbinary('STOR infecto_parasitarias_completo01.csv', bio)
            ftp.close()
            #FTP
            # df.to_csv('infecto_parasitarias_completo01.csv',index=False) #Salvando dataframe em csv e usando
            # df.loc[id_doenca] = amostra_nova
            return redirect('/casos_clinicos/')
        else:
            doencas = pd.DataFrame()
            doencas['doenca'] = df[classe_casos_clinicos].unique()
            # df = df.sort_index (axis = 1)#ordenar
            return render(request,'nova_amostra_doenca.html',{'colunas':df.columns,'doencas':doencas,'classe_casos_clinicos':classe_casos_clinicos,'chave_casos_clinicos':chave_casos_clinicos })
    except Exception as e:
         return HttpResponse('Erro: '+ str(e) +' '+voltar_casos_clinicos)

def deletar_caso_clinico(request,id_doenca):
    try:
        df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
        # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
        deletar = df.loc[df[chave_casos_clinicos] == int(id_doenca)]
        df.drop(deletar.index, inplace=True)
        # df.drop([int(id_doenca)], inplace=True)
        # df.to_csv('infecto_parasitarias_completo01.csv',index=False) #Salvando dataframe em csv e usando
        #FTP
        ftp = FTP()
        ftp.connect('files.000webhost.com', 21)
        ftp.login('jesaias','09011996')
        ftp.cwd ('/public_html/doctraining/')
        buffer = io.StringIO()
        df.to_csv(buffer,index=False)
        text = buffer.getvalue()
        bio = io.BytesIO(str.encode(text))
        ftp.storbinary('STOR infecto_parasitarias_completo01.csv', bio)
        ftp.close()
        #FTP
        return redirect('/casos_clinicos/')
    except Exception as e:
        return HttpResponse('Erro: '+ str(e) +'\n '+voltar_casos_clinicos)


###################################### JSON ################################################################
def todos_casos_clinicos(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    if request.method == 'GET':#Mostra todos os objetos
        # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
        try:
            lista = []#lista geral
            id = 0
            for dado in df.values:
                sub_lista = {}#Limpar a dicionario sempre, senão serão os mesmos dados  Sublista
                i = 0
                sub_lista["id"] = id
                for item in dado:
                    #df.columns[i]
                    sub_lista[df.columns[i]] = str(item)
                    i = i + 1
                id = id + 1
                lista.append(sub_lista)
            return JsonResponse(lista,safe=False)
        except Exception as e:
             return JsonResponse({"Erro":str(e)}, status = 400)
    return JsonResponse({"Erro":"Metodo Invalido"}, status = 400)



def caso_clinico(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    if request.method == 'GET':#Mostra todos os objetos
        try:
            id_doenca = random.choice(df.index)
            doenca = {}
            for item in df.columns:
                if df.loc[id_doenca][item] == 0 or df.loc[id_doenca][item] == 1:
                    doenca[item] = int(df.loc[id_doenca][item])
                else:
                    doenca[item] = str(df.loc[id_doenca][item])
            return JsonResponse(doenca,safe=False)
        except Exception as e:
             return JsonResponse({"Erro":str(e)}, status = 400)
    return JsonResponse({"Erro":"Metodo Invalido"}, status = 400)


# def caso_clinico_sintomas(request):
#     df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
#     if request.method == 'GET':#Mostra todos os objetos
#         try:
#             id_doenca = random.choice(df.index)
#             sintomas = []
#             nome_doenca = ''
#             for coluna in df.columns:#coluna em colunas
#                 if df.loc[id_doenca][coluna] == 1: #Se valor = 1 || se tiver o sintoma
#                     sintomas.append(coluna.replace("_", " "))#Adicionar o dado a lista || Adiciona o sintoma a lista de sintomas
#                 elif df.loc[id_doenca][coluna] != 0:#Se valor for diferente de 0 || Se for o nome da doneça
#                     nome_doenca = df.loc[id_doenca][coluna]#Coloca na variavel o nome da doença
#             dados = {
#             'sintomas': sintomas,
#             'doenca': nome_doenca
#             }
#             return JsonResponse(dados,safe=False)
#         except Exception as e:
#             return JsonResponse({"Erro":str(e)}, status = 400)
#
#     return JsonResponse({"Erro":"Somente Metodo Get"}, status = 400)
#
#
# def todos_casos_clinicos_sintomas(request):
#     df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
#     if request.method == 'GET':#Mostra todos os objetos
#         try:
#             lista_doencas_e_sintomas = []#Lista com as doenças e os sintomas
#             for linha in df.values:#todas as Linhas
#                 lista_sintomas = []#Lista com sintomas de uma doença
#                 nome_doenca = ''#doença
#                 linhas_e_colunas = zip(linha,df.columns) #Zipar as duas cvariaveis em uma só
#                 for valor,coluna in linhas_e_colunas:#
#                     if valor == 1:#Se tiver o sintoma
#                         lista_sintomas.append(coluna.replace("_", " "))#Adicionar Sintoma a lista de sintomas
#                     elif valor != 0:#se for o nome da doença não é nem 1 nem 0
#                         nome_doenca = valor
#                 dados = {
#                 'sintomas': lista_sintomas,
#                 'doenca': nome_doenca
#                 }
#                 lista_doencas_e_sintomas.append(dados)
#             return JsonResponse(lista_doencas_e_sintomas,safe=False)
#         except Exception as e:
#              return JsonResponse({"Erro":str(e)}, status = 400)
#
#     return JsonResponse({"Erro":"Somente Metodo Get"}, status = 400)

def json_doenca_sintomasCasosClinicos(linha,colunas):
    try:
        lista_sintomas = []#Lista com sintomas de uma doença
        nome_doenca = ''#doença
        linhas_e_colunas = zip(linha,colunas) #Zipar as duas variaveis em uma só
        for valor,coluna in linhas_e_colunas:#
            if valor == 1:#Se tiver o sintoma
                lista_sintomas.append(coluna.replace("_", " "))#Adicionar Sintoma a lista de sintomas
            elif valor != 0:#se for o nome da doença não é nem 1 nem 0
                nome_doenca = valor
        dados = {
        'sintomas': lista_sintomas,
        'doenca': nome_doenca.replace("_", " ")
        }
        return dados
    except Exception as e:
         return JsonResponse({"Erro":str(e)}, status = 400)


def caso_clinico_doenca_sintomas(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    if request.method == 'GET':#Mostra todos os objetos
        try:
            id_doenca = random.choice(df.index)
            dados = json_doenca_sintomasCasosClinicos(df.loc[id_doenca],df.columns)
            return JsonResponse(dados,safe=False)
        except Exception as e:
            return JsonResponse({"Erro":str(e)}, status = 400)

    return JsonResponse({"Erro":"Somente Metodo GET"}, status = 400)


def todos_casos_clinicos_doencas_sintomas(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    if request.method == 'GET':#Mostra todos os objetos
        try:
            lista_doencas_e_sintomas = []#Lista com as doenças e os sintomas
            for linha in df.values:#todas as Linhas
                dados = json_doenca_sintomasCasosClinicos(linha,df.columns) #Json de uma amostra de doença
                lista_doencas_e_sintomas.append(dados)
            return JsonResponse(lista_doencas_e_sintomas,safe=False)
        except Exception as e:
             return JsonResponse({"Erro":str(e)}, status = 400)

    return JsonResponse({"Erro":"Somente Metodo GET"}, status = 400)


def doencas_casos_clinicos(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    if request.method == 'GET':#Mostra todos os objetos
        try:
            lista_doencas = []#Lista com as doenças e os sintomas
            doencas = pd.DataFrame()
            doencas['doenca'] = df[classe_casos_clinicos].unique()
            for linha in doencas['doenca']:#todas as Linhas
                lista_doencas.append(linha.replace("_", " "))
            dados = {
            'doencas': lista_doencas
            }
            return JsonResponse(dados,safe=False)
        except Exception as e:
             return JsonResponse({"Erro":str(e)}, status = 400)

    return JsonResponse({"Erro":"Somente Metodo GET"}, status = 400)


def sintomas_casos_clinicos(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    if request.method == 'GET':#Mostra todos os objetos
        try:
            lista_sintomas = []#Lista com as doenças e os sintomas
            for coluna in df.columns:#todas as Linhas
                if coluna != classe_casos_clinicos:
                    lista_sintomas.append(coluna.replace("_", " "))
            dados = {
            'sintomas': lista_sintomas
            }
            return JsonResponse(dados,safe=False)
        except Exception as e:
             return JsonResponse({"Erro":str(e)}, status = 400)

    return JsonResponse({"Erro":"Somente Metodo GET"}, status = 400)






#Administradores
def solicitacoes_aprovacao(request):
    df = pd.read_csv('https://jesaias.000webhostapp.com/doctraining/infecto_parasitarias_completo01.csv') #lendo os dados
    # df = pd.read_csv('infecto_parasitarias_completo01.csv') #lendo os dados
    if request.method == 'GET':#Mostra todos os objetos
        try:
            lista_sintomas = []#Lista com as doenças e os sintomas
            for coluna in df.columns:#todas as Linhas
                if coluna != classe_casos_clinicos:
                    lista_sintomas.append(coluna.replace("_", " "))
            dados = {
            'sintomas': lista_sintomas
            }
            return JsonResponse(dados,safe=False)
        except Exception as e:
             return JsonResponse({"Erro":str(e)}, status = 400)

    return JsonResponse({"Erro":"Somente Metodo GET"}, status = 400)
